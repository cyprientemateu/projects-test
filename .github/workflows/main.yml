name: CI-CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      working-directory: demo-project5/terraform
      run: terraform init -input=false

    - name: Terraform Destroy (auto-approve)
      working-directory: demo-project5/terraform
      run: terraform destroy -auto-approve

    - name: Terraform Apply
      working-directory: demo-project5/terraform
      run: terraform apply -auto-approve

    - name: Get EC2 IP from Terraform output
      id: ec2_ip
      working-directory: demo-project5/terraform
      run: |
        # Run terraform output quietly to get only the IP
        ip=$(terraform output -raw instance_public_ip 2>/dev/null)
        # Clean any whitespace/newlines just in case
        ip=$(echo "$ip" | tr -d '\r\n')

        if [ -z "$ip" ]; then
          echo "Failed to get instance_public_ip from Terraform output"
          exit 1
        fi

        echo "ip=$ip" >> $GITHUB_OUTPUT
        echo "Instance public IP is: $ip"

    - name: Use EC2 IP
      run: |
        echo "EC2 IP: ${{ steps.ec2_ip.outputs.ip }}"    

    - name: Wait for SSH to be available
      run: |
        echo "EC2 IP: ${{ steps.ec2_ip.outputs.ip }}"
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        until ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ steps.ec2_ip.outputs.ip }} "echo ready"; do
          echo "Waiting for SSH..."
          sleep 5
        done

    - name: Setup Python for Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip sshpass
        pip3 install --user ansible

    - name: Run Ansible Playbook
      working-directory: demo-project5/ansible
      run: |
        ansible-playbook -i "${{ steps.ec2_ip.outputs.ip }}," -u ec2-user --private-key private_key.pem playbook.yml

    - name: Cleanup private key
      run: rm private_key.pem